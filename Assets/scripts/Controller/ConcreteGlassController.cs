//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace dassault
{
	public partial class ConcreteGlassController : GlassController
	{
		#region Constructor
		public ConcreteGlassController()
		{ 
            m_serverInfo = new ServerInfo(ConnectionType.BLUETOOTH);
            m_tcpServerInfo = new ServerInfo(ConnectionType.TCPIP);

            m_watchConnectionInfo = new ConnectionInfo(ConnectionType.BLUETOOTH);
            m_padConnectionInfo = new ConnectionInfo(ConnectionType.BLUETOOTH);
            m_expertConnectionInfo = new ConnectionInfo(ConnectionType.TCPIP);

			ConcreteGlassController controller = this;
			m_state = new StartingState(ref controller);
		}
		#endregion

		#region Private methods
		private void CloseWatchConnection()
		{
			Debug.Log("CallSetWatchConnexionStatus(false)");
			m_callbacks.CallSetWatchConnexionStatus(false);

            if (m_watchConnectionInfo.localToRemoteId != -1 && m_cxnManager.StopClient(m_watchConnectionInfo.localToRemoteId, m_watchConnectionInfo.type) != 0)
			{
				Debug.LogError("Error while closing connection with watch");
			}

            if (m_watchConnectionInfo.remoteToLocalId != -1 && m_cxnManager.CloseServerConnection(m_serverInfo.id, m_watchConnectionInfo.remoteToLocalId, m_watchConnectionInfo.type) != 0)
			{
				Debug.LogError("Error while closing connection with watch");
			}

            m_watchConnectionInfo.localToRemoteId = -1;
            m_watchConnectionInfo.remoteToLocalId = -1;
		}

		private void ClosePadConnection()
		{
			Debug.Log("CallSetPadConnexionStatus(false)");
			m_callbacks.CallSetPadConnexionStatus(false);

            if (m_padConnectionInfo.localToRemoteId != -1 && m_cxnManager.StopClient(m_padConnectionInfo.localToRemoteId, m_padConnectionInfo.type) != 0)
			{
				Debug.LogError("Error while closing connection with pad");
			}

            if (m_padConnectionInfo.remoteToLocalId != -1 && m_cxnManager.CloseServerConnection(m_serverInfo.id, m_padConnectionInfo.remoteToLocalId, m_padConnectionInfo.type) != 0)
			{
				Debug.LogError("Error while closing connection with pad");
			}

            m_padConnectionInfo.localToRemoteId = -1;
            m_padConnectionInfo.remoteToLocalId = -1;
		}


        private void CloseExpertConnection()
        { 
            // --->>> TODO beurk ! i use the pad connexion status to have a visual feedback for the expert support server connexion...
            m_callbacks.CallSetPadConnexionStatus(false);

            if (m_expertConnectionInfo.localToRemoteId != -1 && m_cxnManager.CloseServerConnection(m_serverInfo.id, m_expertConnectionInfo.remoteToLocalId, m_expertConnectionInfo.type) != 0)
            {
                Debug.LogError("Error while closing connection with pad");
            }

            if (m_expertConnectionInfo.remoteToLocalId != -1 && m_cxnManager.StopClient(m_expertConnectionInfo.localToRemoteId, m_expertConnectionInfo.type) != 0)
            {
                Debug.LogError("Error while closing connection with pad");
            }

            m_expertConnectionInfo.localToRemoteId = -1;
            m_expertConnectionInfo.remoteToLocalId = -1;
        }

        private bool startStreamingServer(out string url, out int port)
        {
            return m_callbacks.CallStartVideoStreamingServer(out url, out port);
        }
		#endregion

		#region Protected methods
		protected override void PreQuit()
		{
			Debug.Log("Stops the connections");

            if (m_serverInfo != null && m_serverInfo.id != -1)
			{
                m_cxnManager.StopServer(m_serverInfo.id, m_serverInfo.cxnType); // Stops all reception callbacks
                m_serverInfo.id = -1;
                m_watchConnectionInfo.remoteToLocalId = -1;
                m_padConnectionInfo.remoteToLocalId = -1;
			}


			CloseWatchConnection();

			ClosePadConnection();
		}
		#endregion Protected methods

		#region Public methods
		public ConcreteGlassController Init(GlassControllerCallbacks callbacks, IBTServices btServices)
		{
			base.Init(callbacks);
			
			return this;
		}

		public override void OnAnnotationRequest(string stepPath, byte[] image)
		{
			PushMessage(new SendAnnotation(new CaptureCmd(stepPath, image)));
		}

		public override void OnCurrentStepChanged(string stepPath)
		{
			PushMessage(new SendCurrentStep(new WatchStepPathChangedCmd(stepPath)));
		}

		public override void OnCommentViewVisibilityChanged(bool visible)
		{
			PushMessage(new CommentVisibility(visible));
		}
		
		public override void OnToolViewVisibilityChanged(bool visible)
		{
			PushMessage(new ToolVisibility(visible));
		}
		
		public override void OnReferenceViewVisibilityChanged(bool visible)
		{
			PushMessage(new ReferenceVisibility(visible));
		}
		
		public override void OnAnnotationViewVisibilityChanged(bool visible)
		{
			PushMessage(new AnnotationVisibility(visible));
		}
		
		public override void OnLocalizationViewVisibilityChanged(bool visible)
		{
			PushMessage(new LocalizationVisibility(visible));
		}

        public override void OnStreamingServerStart(string url, int port)
        {
            StreamParametersCmd cmd = new StreamParametersCmd(url, port);
            SendCommand(m_expertConnectionInfo,cmd);
        }

        public override void OnScenariiStatus(List<string> scenarii)
        {
            // update the list of available scenarios on the watch
            ScenariiStatusCmd cmd = new ScenariiStatusCmd(scenarii.ToArray());
            SendCommand(m_watchConnectionInfo, cmd);
        }

        public override void addScenarioToList(string scenario)
        {
            // send the update to the watch
            ShowNewProcedureCmd cmd = new ShowNewProcedureCmd(true, scenario);
            SendCommand(m_watchConnectionInfo, cmd);
        }  
        
        #endregion Public methods

        #region Attributs
        /// <summary>
        /// Information about the server used to receive commands (from watch).
        /// </summary>
        private ServerInfo m_serverInfo;

        /// <summary>
        /// information about the tcp server used to receive commands from the support expert station (pad).
        /// </summary>
        private ServerInfo m_tcpServerInfo;

        /// <summary>
        /// Information about the connections established with the pad.
        /// </summary>
        private ConnectionInfo m_padConnectionInfo;

        /// <summary>
        /// Information about the connections established with the watch.
        /// </summary>
        private ConnectionInfo m_watchConnectionInfo;

        /// <summary>
        /// information about the connection established with the expert support server
        /// </summary>
        private ConnectionInfo m_expertConnectionInfo;

		#endregion Attributs
	}
}

